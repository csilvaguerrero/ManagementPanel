@using managementPanel.Models
@using System.Globalization;



@{
    ViewBag.Title = "VerEstadisticasGrupo";
    List<Equipos> misEquipos = (List<Equipos>)Model[0];
    List<FacturacionPorMes> facturacionRPorMes = (List<FacturacionPorMes>)Model[1];
    decimal facturacionT = (decimal)Model[2];
    List<FacturacionPorMes> misProyectosAcabados = (List<FacturacionPorMes>)Model[3];
    decimal facturacionTacabados = (decimal)Model[4];
    List<Proyectos> misProyectosTotales = (List<Proyectos>)Model[5];
}


<script src="~/ContentManagement/Js/jspfd.debug.js" type="text/javascript"></script>
<script src="~/Scripts/chart.js"></script>
<script src="~/Scripts/chart.min.js"></script>



<form method="post" class="cajaFiltros">
    <div class="filtros">
        <label>Equipos: </label>
        <select class="form-control" name="equipoId">
            @foreach (Equipos e in misEquipos)
            {
                <option value="@e.IdEquipo" @(e.IdEquipo == ViewBag.id ? "selected" : "")>@e.Nombre</option>
                if (e.IdEquipo == ViewBag.id)
                {
                    ViewBag.equipo = e.Nombre;
                }
            }
        </select>
    </div>
    <div class="filtros">
        <label>Fecha de inicio:</label>
        <input class="form-control" type="date" name="fechaDesde" value="@ViewBag.desde.ToString("yyyy-MM-dd")">
    </div>
    <div class="filtros">
        <label>Fecha actual:</label>
        <input class="form-control" type="date" name="fechaHoy" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly>
    </div>
    <div class="filtros">
        <label>Fecha de fin:</label>
        <input class="form-control" type="date" name="fechaHasta" value="@ViewBag.hasta.ToString("yyyy-MM-dd")"><br />
    </div>
    <button type="submit" id="botonBuscar" class="botonFiltrar">
        <span class="material-icons-outlined">search</span>
    </button>
</form>



@if (facturacionRPorMes.Count() > 0 || misProyectosAcabados.Count() > 0)
{
    <button type="submit" id="btnDescargar" onclick="descargarPDF('@facturacionTacabados', '@facturacionT', '@ViewBag.equipo', '@ViewBag.desde.ToString("dd/MM/yyyy")', '@ViewBag.hasta.ToString("dd/MM/yyyy")')">
        Descargar PDF  <span class="verTablero material-icons-outlined">picture_as_pdf</span>
    </button>

    <h2 class="titulosEstadistiacas">Desviaciones</h2>
    <div class="cajaGraficos">
        <canvas id="desviacion" width="300" height="70"></canvas>
    </div>

    <h2 class="titulosEstadistiacas">Facturación por mes desde @ViewBag.desde.ToString("dd/MM/yyyy") a @DateTime.Now.ToString("dd/MM/yyyy")</h2>
    <div class="cajaGraficos">
        <canvas id="facturacionAcabados" width="300" height="70"></canvas>
    </div>
    <p id="parrafoHoras">Horas totales facturadas: <span>@facturacionTacabados h</span></p>
    <br />

    <h2 class="titulosEstadistiacas">Facturación restante por mes desde @DateTime.Now.ToString("dd/MM/yyyy") a @ViewBag.hasta.ToString("dd/MM/yyyy")</h2>
    <div class="cajaGraficos">
        <canvas id="facturacion" width="300" height="70"></canvas>
    </div>
    <p id="parrafoHoras">Horas totales sin facturar: <span>@facturacionT h</span></p>
    <br />

    <h2 class="titulosEstadistiacas">Incidencias y Replanificaciones</h2>
    <div class="cajaGraficos">
        <canvas id="incidencias" width="300" height="70"></canvas>
    </div>

}
else
{
    <div class="mensaje">
        <span>No hay resultados </span>
    </div>
}
<br />
<br />
<br />

<script>
    var datosGraficoD = {
        labels: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => "'" + x.Nombre + "'")))],
        datasets: [{
            label: 'Desviación Proyecto',
            data: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => x.Desviacion.ToString("0.00", CultureInfo.InvariantCulture))))],
            fill: false,
            borderColor: 'red', 
            tension: 0.2,
            radius: 7
        },
        {
            label: 'Desviación Analisis',
            data: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => x.DesviacionAnalisis.ToString("0.00", CultureInfo.InvariantCulture))))],
            fill: false,
            borderColor: 'blue',
            tension: 0.2,
            radius: 7
            },
        {
            label: 'Desviación Desarrollo',
            data: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => x.DesviacionDesarrollo.ToString("0.00", CultureInfo.InvariantCulture))))],
            fill: false,
            borderColor: 'green',
            tension: 0.2,
            radius: 7
        }]
    };

    var graficoDesviacion = document.getElementById('desviacion').getContext('2d');

    var chartDesviacion = new Chart(graficoDesviacion, {
        type: 'line',
        data: datosGraficoD,
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: false
                }
            }
        }
    });

        var datosGraficoF = {
            labels: [@Html.Raw(string.Join(",", facturacionRPorMes.Select(x => "'" + x.Mes.ToString() + "/" + x.Año.ToString() + "'")))],
            datasets: [{
                label: 'Horas facturadas',
                data: [@Html.Raw(string.Join(",", facturacionRPorMes.Select(x => x.HorasFacturadas.ToString("0.00", CultureInfo.InvariantCulture))))],
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        };

        var graficoFacturacion = document.getElementById('facturacion').getContext('2d');

        var chartFacturacion = new Chart(graficoFacturacion, {
            type: 'bar',
            data: datosGraficoF,
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        //Acabadas
        var datosGraficoFacabadas = {
            labels: [@Html.Raw(string.Join(",", misProyectosAcabados.Select(x => "'" + x.Mes.ToString() + "/" + x.Año.ToString() + "'")))],
            datasets: [{
                label: 'Horas facturadas',
                data: [@Html.Raw(string.Join(",", misProyectosAcabados.Select(x => x.HorasFacturadas.ToString("0.00", CultureInfo.InvariantCulture))))],
                backgroundColor: 'rgba(213, 164, 240 )',
                borderColor: 'rgba(177, 69, 237)',
                borderWidth: 1
            }]
        };

        var graficoFacturacion2 = document.getElementById('facturacionAcabados').getContext('2d');

        var chartFacturacion2 = new Chart(graficoFacturacion2, {
            type: 'bar',
            data: datosGraficoFacabadas,
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

    var datosGraficoI = {
        labels: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => "'" + x.Nombre + "'")))],
        datasets: [{
            label: 'Número de incidencias',
            data: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => x.Incidencias)))],
            fill: false,
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            pointBackgroundColor: 'rgba(255, 99, 132, 1)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgba(255, 99, 132, 1)',
            tension: 0.2,
            radius: 7
        },
        {
            label: 'Numero de Replanificaciones',
            data: [@Html.Raw(string.Join(",", misProyectosTotales.Select(x => x.Replanificaciones)))],
            fill: false,
            borderColor: 'rgba(91, 53, 244, 1)',
            borderColor: 'rgba(91, 53, 244, 1)',
            backgroundColor: 'rgba(91, 53, 244, 1)',
            pointBackgroundColor: 'rgba(91, 53, 244, 1)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgba(91, 53, 244, 1)',
            tension: 0.2,
            radius: 7
        }]
    };

    var graficoIncidencias = document.getElementById('incidencias').getContext('2d');

    var chartIncidencias = new Chart(graficoIncidencias, {
        type: 'line',
        data: datosGraficoI,
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    function descargarPDF(facturacionTacabados, facturacionT, equipo, desde, hasta) {
        d = new Date();

        var doc = new jsPDF({
            unit: 'mm',
            format: 'a4'
        });

        doc.text("Desviaciones", 110, 8, "center");
        doc.addImage(chartDesviacion.canvas.toDataURL(), 'png', 5, 10, 200, 60);
        doc.text("Facturación por mes (de " + desde + " a " + d.toLocaleDateString() + ")", 110, 75, "center");
        doc.addImage(chartFacturacion2.canvas.toDataURL(), 'png', 5, 77, 200, 60);
        doc.text("Horas totales facturadas: " + facturacionTacabados, 110, 143, "center");
        doc.text("Facturación restante por mes (de " + d.toLocaleDateString() + " a " + hasta +")", 110, 153, "center");
        doc.addImage(chartFacturacion.canvas.toDataURL(), 'png', 5, 156, 200, 60);
        doc.text("Horas totales sin facturar: " + facturacionT, 110, 220, "center");
        doc.text("Incidencias y replanificaciones", 110, 229, "center");
        doc.addImage(chartIncidencias.canvas.toDataURL(), 'png', 5, 232, 200, 60);

        doc.save('estadisticas-'+equipo+'.pdf');
    }
</script>